# -*- coding: utf-8 -*-
"""online_retail.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c3rdI2x40HmVzd7XAtwclhdJcGQy0XF0
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import matplotlib.pyplot as plt
import plotly.plotly as py
import seaborn as sns 
import plotly.graph_objs as go

!pip install xlrd

import xlrd

#df = pd.read_excel("https://archive.ics.uci.edu/ml/machine-learning-databases/00352/Online%20Retail.xlsx")
#pdf = df
df= pd.read_excel("https://github.com/PriyadharshanSaba/OnlineRetailSales-RMFmodel/raw/master/Dataset/Online%20Retail.xlsx")

df.head()

#DATA WRANGLING

#dropping NaN data rows
df=df.dropna()

#dropping description column
df=df.drop(columns=['Description'])
df.head()

df['Amount'] = df.UnitPrice * df.Quantity
#removing unit price
df=df.drop(columns=['UnitPrice'])

df['date'] = [d.date() for d in df['InvoiceDate']]
df['time'] = [d.time() for d in df['InvoiceDate']]
#print(df.head())

#CLEANING CUSTOMERS

#dropping NaN values in CustomerID
df = df[np.isfinite(df['CustomerID'])]      #df.loc[df['InvoiceNo']==573174]  reference for NaN value

#removing customers with less than 1Re of transaction
df=df[(df['Amount'] >=1)]
df.head()

#grouping by countries and adding purchasing percentage on basis of quantity
group_country = df.groupby(['Country'],as_index=False).sum()
group_country = group_country.drop(columns=['CustomerID'])
group_country.sort_values('Quantity',ascending=False,inplace=True)

total_purchased = group_country['Quantity'].sum()
group_country['Buy_perc']=(group_country['Quantity']/total_purchased)*100
group_country.head()

#Buy_Perc plotting

country=list(group_country['Country'])
Cust_id=list(group_country['Buy_perc'])
plt.figure(figsize=(12,8))
sns.barplot(country, Cust_id, alpha=1)
plt.xticks(rotation='60')
plt.show()

#analysing country with highest purchasing 
x=group_country.where(group_country['Buy_perc']==group_country['Buy_perc'].max())
x=x['Country'].dropna().get_values().tolist()[0]

dfcur = df.where(df.Country == x)
dfcur=dfcur.dropna()

#first time buyers
x=dfcur.groupby('CustomerID',).count()
no_customers= x['InvoiceNo'].count()
no_first_timers=x.where(x['InvoiceNo']==1).dropna().count()['InvoiceNo']
print('Percentage of new customers purchasing for the first time',(no_first_timers*100/no_customers))

objects = ('First/New Customers', 'Existing')
y_pos = np.arange(len(objects))
perc = [no_first_timers,no_customers]
plt.bar(y_pos, perc, align='center', alpha=0.5)
plt.xticks(y_pos, objects)
plt.ylabel('Percentage')
plt.title('Customers')
 
plt.show()

#Converting to date to shortened string formate %y(2)%m
dfcur['dateS']=dfcur['date'].apply(lambda x: x.strftime('%y%m'))
#print('Far date: ',dfcur['dateS'].min(),"\tRecent: ",dfcur['dateS'].max())

#RMF MODEL

#---- Recency Analysis------
def recency(row):
  if int(row['dateS']) > 1109:
    val = 5
  elif int(row['dateS']) <= 1109 and int(row['dateS']) > 1106:
    val = 4
  elif int(row['dateS']) <= 1106 and int(row['dateS']) > 1103:
    val = 3
  elif int(row['dateS']) <= 1103 and int(row['dateS']) > 1101:
    val = 2
  else:
    val = 1
  return val
  
dfcur['Recency_val'] = dfcur.apply(recency, axis=1)

dfcur.head()

#table with just recency values
rec_df = dfcur
rec_df = rec_df.drop(columns=['Quantity','InvoiceNo','StockCode','InvoiceDate','Country','Amount','date','time','dateS'])
recencyTable = rec_df.drop_duplicates( keep=False)
rec_df.head()

plt.figure(figsize=(12,8))
sns.countplot(x="Recency_val", data=rec_df)
plt.ylabel('Count', fontsize=12)
plt.xlabel('Recency_Value', fontsize=12)
plt.xticks(rotation='vertical')
plt.title("Frequency of Recency_Flag", fontsize=15)
plt.show()

print("\tRecency Analysis\n",rec_df.groupby('Recency_val',as_index=False).count())

#------Frequency Analysis-------

freq_df = dfcur[['Country','InvoiceNo','CustomerID']].drop_duplicates()
freq_count = freq_df.groupby(['Country','CustomerID'],as_index=False)[['InvoiceNo']].count()
freq_count.head()

unique_invoice=freq_df[['InvoiceNo']].drop_duplicates()
unique_invoice.head()

#Dividing the dataframe into 5 bands
unique_invoice['fband']=pd.qcut(unique_invoice['InvoiceNo'],5)
unique_invoice.head()
freqBandTable = unique_invoice[['fband']].drop_duplicates().reset_index()
freqBandTable

def frequ(row):
  if row['InvoiceNo'] <= 13:
    val = 1
  elif row['InvoiceNo'] > 13 and row['InvoiceNo']<=24:
    val =2
  elif row['InvoiceNo']>24 and row['InvoiceNo']<=35:
    val = 3
  elif row['InvoiceNo']>35 and row['InvoiceNo']<=60:
    val = 4
  else:
    val = 5
  return val

freq_count['freq_val'] = freq_count.apply(frequ,axis=1)
freq_count.head()

plt.figure(figsize=(12,8))
sns.countplot(x="freq_val", data=freq_count)
plt.ylabel('Count', fontsize=12)
plt.xlabel('Frequency_Value', fontsize=12)
plt.xticks(rotation='vertical')
plt.title("Frequency Analysis", fontsize=15)
plt.show()

print("\tFrequency Analysis\n",freq_count.groupby('freq_val',as_index=False).count())

#----MonetaryValue Analysis------

#monetary value for each country
monetary_df_countries = df.groupby(['Country','CustomerID'],as_index=False)['Amount'].sum()
monetary_df_countries.head()

ctry=list(monetary_df_countries['Country'])
amt=list(monetary_df_countries['Amount'])
plt.figure(figsize=(12,8))
sns.barplot(ctry, amt, alpha=1)
plt.xticks(rotation='60')
plt.show()

print("\tMonetary Analysis Countrywise\n",monetary_df_countries.groupby('Country',as_index=False)[['Amount']].sum().sort_values('Amount', ascending=False).reset_index(drop=True).head())

#getting monetary band
monprice_df = dfcur[['CustomerID','Amount']].drop_duplicates()
monprice_df = monprice_df.groupby(['CustomerID'],as_index=False)[['Amount']].sum()
monprice_df['monetary'] = pd.qcut(monprice_df['Amount'],5)
monprice_df=monprice_df.sort_values(by=['monetary'])
monetary_band = monprice_df[['monetary']].drop_duplicates().reset_index(drop=True)
monetary_band

x=monetary_band['monetary'].get_values().tolist()
x

def mon(row):
  if row['Amount'] <= x[0].right:
    val = 1
  elif row['Amount']> x[0].right and row['Amount']<=x[1].right:
    val = 2
  elif row['Amount']> x[1].right and row['Amount']<=x[2].right:
    val = 3
  elif row['Amount']> x[2].right and row['Amount']<=x[3].right:
    val = 4
  else:
    val = 5
  return val

monprice_df['Mont_val'] = monprice_df.apply(mon,axis=1)

monprice_df.head()

plt.figure(figsize=(12,8))
sns.countplot(x="Mont_val", data=monprice_df)
plt.ylabel('Count', fontsize=12)
plt.xlabel('Monetary_Value', fontsize=12)
plt.xticks(rotation='vertical')
plt.title("Monetary Analysis", fontsize=15)
plt.show()

print("\tMonetary Analysis\n",monprice_df.groupby(['Mont_val'],as_index=False)['monetary'].count())

#fetching the sample with RMF values
uk_df=pd.merge(rec_df,freq_count)
uk_df=pd.merge(uk_df,monprice_df)
sample_df=uk_df
sample_df=sample_df.drop_duplicates().reset_index(drop=True)
sample_df = sample_df.drop(columns=['Country','InvoiceNo','monetary'])

sample_df.head(10)

#----CLUSTERING----

#Outliers in Monetary Amount
amountRange = sample_df.as_matrix(columns=['Amount'])

freqRange=sample_df.as_matrix(columns=['freq_val'])
plt.scatter(amountRange.tolist(),freqRange.tolist(),8)
plt.xlabel('Monetary Amount')
plt.ylabel('Frequency')

recRange = sample_df.as_matrix(columns=['freq_val'])

recRange=sample_df.as_matrix(columns=['Recency_val'])
plt.scatter(amountRange.tolist(),recRange.tolist(),8)
plt.xlabel('Monetary Amount')
plt.ylabel('Recency')

#Standard Deviation approach
x = np.array(amountRange)
xmean = np.mean(x,axis=0)
xsd = np.std(x,axis=0)
sample_df.shape
#amountRange = [ i for i in range(0,sample_df.shape[0]) if(sample_df.iloc[i]['Amount'] > xmean-2*xsd)]
#amountRange = [ y for y in amountRange if(y['Amount'] <xmean+2*xsd)]

sample_df = sample_df[sample_df['Amount'] >= xmean[0]-2*xsd[0]]
sample_df = sample_df[sample_df['Amount'] <= xmean[0]+2*xsd[0]]
sample_df.head()

amountRange = sample_df.as_matrix(columns=['Amount'])
recRange=sample_df.as_matrix(columns=['Recency_val'])
plt.scatter(amountRange.tolist(),recRange.tolist(),8)
plt.xlabel('Monetary Amount')
plt.ylabel('Recency')

!pip install -U scikit-learn

!pip install pyspark

from sklearn.cluster import KMeans 
import pylab as pl

#kmeans = KMeans(n_clusters=4)
#x = sample_df.as_matrix()
#kmeans.fit(x)
#print(kmeans.cluster_centers_)

#print(kmeans.labels_)
#plt.scatter(x[:,0],x[:,1], c=kmeans.labels_, cmap='rainbow')
sample_df.head()

x = sample_df[['freq_val']].as_matrix()
y = sample_df[['Amount']].as_matrix()
z_df = sample_df[['freq_val','Amount','Recency_val']]
z=z_df.as_matrix()

nc = range(2, 20)
kmeans = [KMeans(n_clusters=i) for i in nc]
kmeans
score = [kmeans[i].fit(z).score(z) for i in range(len(kmeans))]

score

#elbow point
pl.plot(nc,score)

pl.xlabel('Number of Clusters')

pl.ylabel('Score')

pl.title('Elbow Curve')

pl.show()

kmeans=KMeans(n_clusters=6)
kmeansoutput=kmeans.fit(z)
#kmeansoutput

"""pca = PCA(n_components=1).fit(y)
pca_y = pca.transform(y)
pca_x = pca.transform(x)"""

pl.scatter(x[:, 0],y[:, 0], c=kmeansoutput.labels_)
pl.show()

C = kmeans.cluster_centers_
print(C)  
labels = kmeans.labels_

sample_df.head()

#fetching customers

mailList1_df = sample_df
mailList1_df = mailList1_df[ ((mailList1_df.freq_val ==5)) | ((mailList1_df.freq_val ==4)) | ((mailList1_df.freq_val !=5 & mailList1_df.Amount > 8000.0)) ]

z

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

color=["#FFFF00", "#1CE6FF", "#FF34FF", "#FF4A46", "#008941", "#006FA6", "#A30059","#FFDBE5", "#7A4900", "#0000A6", "#63FFAC", "#B79762", "#004D43", "#8FB0FF", "#997D87","#5A0007", "#809693", "#FEFFE6", "#1B4400", "#4FC601", "#3B5DFF", "#4A3B53", "#FF2F80","#61615A", "#BA0900", "#6B7900", "#00C2A0", "#FFAA92", "#FF90C9", "#B903AA", "#D16100","#DDEFFF", "#000035", "#7B4F4B", "#A1C299", "#300018", "#0AA6D8", "#013349", "#00846F","#372101", "#FFB500", "#C2FFED", "#A079BF", "#CC0744", "#C0B9B2", "#C2FF99", "#001E09","#00489C", "#6F0062", "#0CBD66", "#EEC3FF", "#456D75", "#B77B68", "#7A87A1", "#788D66","#885578", "#FAD09F", "#FF8A9A", "#D157A0", "#BEC459", "#456648", "#0086ED", "#886F4C","#34362D", "#B4A8BD", "#00A6AA", "#452C2C", "#636375", "#A3C8C9", "#FF913F", "#938A81","#575329", "#00FECF", "#B05B6F", "#8CD0FF", "#3B9700", "#04F757", "#C8A1A1", "#1E6E00","#7900D7", "#A77500", "#6367A9", "#A05837", "#6B002C", "#772600", "#D790FF", "#9B9700","#549E79", "#FFF69F", "#201625", "#72418F", "#BC23FF", "#99ADC0", "#3A2465", "#922329","#5B4534", "#FDE8DC", "#404E55", "#0089A3", "#CB7E98", "#A4E804", "#324E72", "#6A3A4C","#83AB58", "#001C1E", "#D1F7CE", "#004B28", "#C8D0F6", "#A3A489", "#806C66", "#222800","#BF5650", "#E83000", "#66796D", "#DA007C", "#FF1A59", "#8ADBB4", "#1E0200", "#5B4E51","#C895C5", "#320033", "#FF6832", "#66E1D3", "#CFCDAC", "#D0AC94", "#7ED379", "#012C58","#000000"]

fig = plt.figure()
ax = Axes3D(fig)
for i in range(len(z)):
  ax.scatter(z[i][0], z[i][1],z[i][2],c=color[labels[i]])
ax.scatter(C[:, 0], C[:, 1], C[:, 2], marker='*', c='#050505', s=1000)
ax.set_xlabel('R')
ax.set_ylabel('F')
ax.set_zlabel('Monetary Amount')

for angle in range(0, 360):
    ax.view_init(45,angle)
    plt.draw()
    plt.pause(.1)
plt.close()

